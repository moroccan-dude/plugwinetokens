<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model - Must be defined first -->
	<annotation-driven content-negotiation-manager="contentNegotiationManager" />
	
	<!--  content negotiator strategy -->
	<beans:bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <beans:property name="favorPathExtension" value="false"/>
	    <beans:property name="ignoreAcceptHeader" value="false"/>
	    <beans:property name="mediaTypes">
            <beans:map>
                <beans:entry key="json" value="application/json" />
                <beans:entry key="xml" value="application/xml" />
            </beans:map>
	    </beans:property>
	    <beans:property name="defaultContentType" value="application/json"/>
	</beans:bean>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- Configure to plugin JSON as request and response in method handler -->
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jsonMessageConverter"/>
				<beans:ref bean="xmlMessageConverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<beans:bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
			<beans:property name="supportedMediaTypes" value="application/json" />
	</beans:bean>	
	
	<!-- Configure bean to convert XML to POJO and vice versa -->
	<beans:bean id="xmlMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
    	<beans:constructor-arg ref="jaxb2Marshaller" />
    	<beans:property name="supportedMediaTypes" value="application/xml"/>
	</beans:bean>
	
	<beans:bean id="jaxb2Marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<beans:property name="classesToBeBound">
			<beans:list>
				<beans:value>com.plugwine.domain.holder.VariableHolder</beans:value>
				<beans:value>com.plugwine.web.PlugwineResultModel</beans:value>
<!-- 				<beans:value>com.plugwine.domain.holder.PlugwineList</beans:value> -->
			</beans:list>
		</beans:property>
	</beans:bean>

    <!-- auto-scan my rest controllers -->
	<context:component-scan base-package="com.plugwine.web.controller" />
	
	<!-- Global Exception handler -->
	<beans:bean id="controllerExceptionHandler" class="com.plugwine.web.ControllerExceptionHandler"/>

</beans:beans>
